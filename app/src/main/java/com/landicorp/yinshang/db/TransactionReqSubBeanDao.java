package com.landicorp.yinshang.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSACTION_REQ_SUB_BEAN".
*/
public class TransactionReqSubBeanDao extends AbstractDao<TransactionReqSubBean, String> {

    public static final String TABLENAME = "TRANSACTION_REQ_SUB_BEAN";

    /**
     * Properties of entity TransactionReqSubBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ScanUrl = new Property(0, String.class, "scanUrl", false, "SCAN_URL");
        public final static Property OrderAmount = new Property(1, String.class, "orderAmount", false, "ORDER_AMOUNT");
        public final static Property IsUploadSuccess = new Property(2, String.class, "isUploadSuccess", false, "IS_UPLOAD_SUCCESS");
        public final static Property IsUndo = new Property(3, String.class, "isUndo", false, "IS_UNDO");
        public final static Property Sid = new Property(4, int.class, "sid", false, "SID");
        public final static Property CardNo = new Property(5, String.class, "cardNo", false, "CARD_NO");
        public final static Property Password = new Property(6, String.class, "password", false, "PASSWORD");
        public final static Property Cash = new Property(7, int.class, "cash", false, "CASH");
        public final static Property BankAmount = new Property(8, int.class, "bankAmount", false, "BANK_AMOUNT");
        public final static Property CouponCoverAmount = new Property(9, int.class, "couponCoverAmount", false, "COUPON_COVER_AMOUNT");
        public final static Property PointCoverAmount = new Property(10, int.class, "pointCoverAmount", false, "POINT_COVER_AMOUNT");
        public final static Property CouponSns = new Property(11, String.class, "couponSns", false, "COUPON_SNS");
        public final static Property ClientOrderNo = new Property(12, String.class, "clientOrderNo", false, "CLIENT_ORDER_NO");
        public final static Property ActivateCode = new Property(13, String.class, "activateCode", false, "ACTIVATE_CODE");
        public final static Property MerchantNo = new Property(14, String.class, "merchantNo", false, "MERCHANT_NO");
        public final static Property T = new Property(15, long.class, "t", false, "T");
        public final static Property TransNo = new Property(16, String.class, "transNo", false, "TRANS_NO");
        public final static Property AuthCode = new Property(17, String.class, "authCode", false, "AUTH_CODE");
        public final static Property SerialNum = new Property(18, String.class, "serialNum", false, "SERIAL_NUM");
        public final static Property PayType = new Property(19, int.class, "payType", false, "PAY_TYPE");
        public final static Property PointAmount = new Property(20, int.class, "pointAmount", false, "POINT_AMOUNT");
        public final static Property Verify = new Property(21, String.class, "verify", true, "VERIFY");
    }


    public TransactionReqSubBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionReqSubBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSACTION_REQ_SUB_BEAN\" (" + //
                "\"SCAN_URL\" TEXT," + // 0: scanUrl
                "\"ORDER_AMOUNT\" TEXT," + // 1: orderAmount
                "\"IS_UPLOAD_SUCCESS\" TEXT," + // 2: isUploadSuccess
                "\"IS_UNDO\" TEXT," + // 3: isUndo
                "\"SID\" INTEGER NOT NULL ," + // 4: sid
                "\"CARD_NO\" TEXT," + // 5: cardNo
                "\"PASSWORD\" TEXT," + // 6: password
                "\"CASH\" INTEGER NOT NULL ," + // 7: cash
                "\"BANK_AMOUNT\" INTEGER NOT NULL ," + // 8: bankAmount
                "\"COUPON_COVER_AMOUNT\" INTEGER NOT NULL ," + // 9: couponCoverAmount
                "\"POINT_COVER_AMOUNT\" INTEGER NOT NULL ," + // 10: pointCoverAmount
                "\"COUPON_SNS\" TEXT," + // 11: couponSns
                "\"CLIENT_ORDER_NO\" TEXT," + // 12: clientOrderNo
                "\"ACTIVATE_CODE\" TEXT," + // 13: activateCode
                "\"MERCHANT_NO\" TEXT," + // 14: merchantNo
                "\"T\" INTEGER NOT NULL ," + // 15: t
                "\"TRANS_NO\" TEXT," + // 16: transNo
                "\"AUTH_CODE\" TEXT," + // 17: authCode
                "\"SERIAL_NUM\" TEXT," + // 18: serialNum
                "\"PAY_TYPE\" INTEGER NOT NULL ," + // 19: payType
                "\"POINT_AMOUNT\" INTEGER NOT NULL ," + // 20: pointAmount
                "\"VERIFY\" TEXT PRIMARY KEY NOT NULL );"); // 21: verify
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSACTION_REQ_SUB_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TransactionReqSubBean entity) {
        stmt.clearBindings();
 
        String scanUrl = entity.getScanUrl();
        if (scanUrl != null) {
            stmt.bindString(1, scanUrl);
        }
 
        String orderAmount = entity.getOrderAmount();
        if (orderAmount != null) {
            stmt.bindString(2, orderAmount);
        }
 
        String isUploadSuccess = entity.getIsUploadSuccess();
        if (isUploadSuccess != null) {
            stmt.bindString(3, isUploadSuccess);
        }
 
        String isUndo = entity.getIsUndo();
        if (isUndo != null) {
            stmt.bindString(4, isUndo);
        }
        stmt.bindLong(5, entity.getSid());
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(6, cardNo);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(7, password);
        }
        stmt.bindLong(8, entity.getCash());
        stmt.bindLong(9, entity.getBankAmount());
        stmt.bindLong(10, entity.getCouponCoverAmount());
        stmt.bindLong(11, entity.getPointCoverAmount());
 
        String couponSns = entity.getCouponSns();
        if (couponSns != null) {
            stmt.bindString(12, couponSns);
        }
 
        String clientOrderNo = entity.getClientOrderNo();
        if (clientOrderNo != null) {
            stmt.bindString(13, clientOrderNo);
        }
 
        String activateCode = entity.getActivateCode();
        if (activateCode != null) {
            stmt.bindString(14, activateCode);
        }
 
        String merchantNo = entity.getMerchantNo();
        if (merchantNo != null) {
            stmt.bindString(15, merchantNo);
        }
        stmt.bindLong(16, entity.getT());
 
        String transNo = entity.getTransNo();
        if (transNo != null) {
            stmt.bindString(17, transNo);
        }
 
        String authCode = entity.getAuthCode();
        if (authCode != null) {
            stmt.bindString(18, authCode);
        }
 
        String serialNum = entity.getSerialNum();
        if (serialNum != null) {
            stmt.bindString(19, serialNum);
        }
        stmt.bindLong(20, entity.getPayType());
        stmt.bindLong(21, entity.getPointAmount());
 
        String verify = entity.getVerify();
        if (verify != null) {
            stmt.bindString(22, verify);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TransactionReqSubBean entity) {
        stmt.clearBindings();
 
        String scanUrl = entity.getScanUrl();
        if (scanUrl != null) {
            stmt.bindString(1, scanUrl);
        }
 
        String orderAmount = entity.getOrderAmount();
        if (orderAmount != null) {
            stmt.bindString(2, orderAmount);
        }
 
        String isUploadSuccess = entity.getIsUploadSuccess();
        if (isUploadSuccess != null) {
            stmt.bindString(3, isUploadSuccess);
        }
 
        String isUndo = entity.getIsUndo();
        if (isUndo != null) {
            stmt.bindString(4, isUndo);
        }
        stmt.bindLong(5, entity.getSid());
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(6, cardNo);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(7, password);
        }
        stmt.bindLong(8, entity.getCash());
        stmt.bindLong(9, entity.getBankAmount());
        stmt.bindLong(10, entity.getCouponCoverAmount());
        stmt.bindLong(11, entity.getPointCoverAmount());
 
        String couponSns = entity.getCouponSns();
        if (couponSns != null) {
            stmt.bindString(12, couponSns);
        }
 
        String clientOrderNo = entity.getClientOrderNo();
        if (clientOrderNo != null) {
            stmt.bindString(13, clientOrderNo);
        }
 
        String activateCode = entity.getActivateCode();
        if (activateCode != null) {
            stmt.bindString(14, activateCode);
        }
 
        String merchantNo = entity.getMerchantNo();
        if (merchantNo != null) {
            stmt.bindString(15, merchantNo);
        }
        stmt.bindLong(16, entity.getT());
 
        String transNo = entity.getTransNo();
        if (transNo != null) {
            stmt.bindString(17, transNo);
        }
 
        String authCode = entity.getAuthCode();
        if (authCode != null) {
            stmt.bindString(18, authCode);
        }
 
        String serialNum = entity.getSerialNum();
        if (serialNum != null) {
            stmt.bindString(19, serialNum);
        }
        stmt.bindLong(20, entity.getPayType());
        stmt.bindLong(21, entity.getPointAmount());
 
        String verify = entity.getVerify();
        if (verify != null) {
            stmt.bindString(22, verify);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21);
    }    

    @Override
    public TransactionReqSubBean readEntity(Cursor cursor, int offset) {
        TransactionReqSubBean entity = new TransactionReqSubBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // scanUrl
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderAmount
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // isUploadSuccess
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // isUndo
            cursor.getInt(offset + 4), // sid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cardNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // password
            cursor.getInt(offset + 7), // cash
            cursor.getInt(offset + 8), // bankAmount
            cursor.getInt(offset + 9), // couponCoverAmount
            cursor.getInt(offset + 10), // pointCoverAmount
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // couponSns
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // clientOrderNo
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // activateCode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // merchantNo
            cursor.getLong(offset + 15), // t
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // transNo
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // authCode
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // serialNum
            cursor.getInt(offset + 19), // payType
            cursor.getInt(offset + 20), // pointAmount
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // verify
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TransactionReqSubBean entity, int offset) {
        entity.setScanUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOrderAmount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsUploadSuccess(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsUndo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSid(cursor.getInt(offset + 4));
        entity.setCardNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPassword(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCash(cursor.getInt(offset + 7));
        entity.setBankAmount(cursor.getInt(offset + 8));
        entity.setCouponCoverAmount(cursor.getInt(offset + 9));
        entity.setPointCoverAmount(cursor.getInt(offset + 10));
        entity.setCouponSns(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setClientOrderNo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setActivateCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMerchantNo(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setT(cursor.getLong(offset + 15));
        entity.setTransNo(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setAuthCode(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSerialNum(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPayType(cursor.getInt(offset + 19));
        entity.setPointAmount(cursor.getInt(offset + 20));
        entity.setVerify(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TransactionReqSubBean entity, long rowId) {
        return entity.getVerify();
    }
    
    @Override
    public String getKey(TransactionReqSubBean entity) {
        if(entity != null) {
            return entity.getVerify();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TransactionReqSubBean entity) {
        return entity.getVerify() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
