package com.landicorp.yinshang.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_RESP_BEAN".
*/
public class LoginRespBeanDao extends AbstractDao<LoginRespBean, Void> {

    public static final String TABLENAME = "LOGIN_RESP_BEAN";

    /**
     * Properties of entity LoginRespBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Sid = new Property(0, int.class, "sid", false, "SID");
        public final static Property MerchantNo = new Property(1, String.class, "merchantNo", false, "MERCHANT_NO");
        public final static Property TerminalNo = new Property(2, String.class, "terminalNo", false, "TERMINAL_NO");
        public final static Property LicenseNo = new Property(3, String.class, "licenseNo", false, "LICENSE_NO");
        public final static Property AccountName = new Property(4, String.class, "accountName", false, "ACCOUNT_NAME");
        public final static Property AccountBank = new Property(5, String.class, "accountBank", false, "ACCOUNT_BANK");
        public final static Property AccountNo = new Property(6, String.class, "accountNo", false, "ACCOUNT_NO");
        public final static Property TerminalName = new Property(7, String.class, "terminalName", false, "TERMINAL_NAME");
        public final static Property Other = new Property(8, String.class, "other", false, "OTHER");
        public final static Property FyMerchantNo = new Property(9, String.class, "fyMerchantNo", false, "FY_MERCHANT_NO");
        public final static Property FyMerchantName = new Property(10, String.class, "fyMerchantName", false, "FY_MERCHANT_NAME");
        public final static Property ActiveCode = new Property(11, String.class, "activeCode", false, "ACTIVE_CODE");
        public final static Property ScanPayType = new Property(12, int.class, "scanPayType", false, "SCAN_PAY_TYPE");
        public final static Property OperatList = new Property(13, String.class, "operatList", false, "OPERAT_LIST");
    }


    public LoginRespBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LoginRespBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_RESP_BEAN\" (" + //
                "\"SID\" INTEGER NOT NULL ," + // 0: sid
                "\"MERCHANT_NO\" TEXT," + // 1: merchantNo
                "\"TERMINAL_NO\" TEXT," + // 2: terminalNo
                "\"LICENSE_NO\" TEXT," + // 3: licenseNo
                "\"ACCOUNT_NAME\" TEXT," + // 4: accountName
                "\"ACCOUNT_BANK\" TEXT," + // 5: accountBank
                "\"ACCOUNT_NO\" TEXT," + // 6: accountNo
                "\"TERMINAL_NAME\" TEXT," + // 7: terminalName
                "\"OTHER\" TEXT," + // 8: other
                "\"FY_MERCHANT_NO\" TEXT," + // 9: fyMerchantNo
                "\"FY_MERCHANT_NAME\" TEXT," + // 10: fyMerchantName
                "\"ACTIVE_CODE\" TEXT," + // 11: activeCode
                "\"SCAN_PAY_TYPE\" INTEGER NOT NULL ," + // 12: scanPayType
                "\"OPERAT_LIST\" TEXT);"); // 13: operatList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_RESP_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginRespBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSid());
 
        String merchantNo = entity.getMerchantNo();
        if (merchantNo != null) {
            stmt.bindString(2, merchantNo);
        }
 
        String terminalNo = entity.getTerminalNo();
        if (terminalNo != null) {
            stmt.bindString(3, terminalNo);
        }
 
        String licenseNo = entity.getLicenseNo();
        if (licenseNo != null) {
            stmt.bindString(4, licenseNo);
        }
 
        String accountName = entity.getAccountName();
        if (accountName != null) {
            stmt.bindString(5, accountName);
        }
 
        String accountBank = entity.getAccountBank();
        if (accountBank != null) {
            stmt.bindString(6, accountBank);
        }
 
        String accountNo = entity.getAccountNo();
        if (accountNo != null) {
            stmt.bindString(7, accountNo);
        }
 
        String terminalName = entity.getTerminalName();
        if (terminalName != null) {
            stmt.bindString(8, terminalName);
        }
 
        String other = entity.getOther();
        if (other != null) {
            stmt.bindString(9, other);
        }
 
        String fyMerchantNo = entity.getFyMerchantNo();
        if (fyMerchantNo != null) {
            stmt.bindString(10, fyMerchantNo);
        }
 
        String fyMerchantName = entity.getFyMerchantName();
        if (fyMerchantName != null) {
            stmt.bindString(11, fyMerchantName);
        }
 
        String activeCode = entity.getActiveCode();
        if (activeCode != null) {
            stmt.bindString(12, activeCode);
        }
        stmt.bindLong(13, entity.getScanPayType());
 
        String operatList = entity.getOperatList();
        if (operatList != null) {
            stmt.bindString(14, operatList);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginRespBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSid());
 
        String merchantNo = entity.getMerchantNo();
        if (merchantNo != null) {
            stmt.bindString(2, merchantNo);
        }
 
        String terminalNo = entity.getTerminalNo();
        if (terminalNo != null) {
            stmt.bindString(3, terminalNo);
        }
 
        String licenseNo = entity.getLicenseNo();
        if (licenseNo != null) {
            stmt.bindString(4, licenseNo);
        }
 
        String accountName = entity.getAccountName();
        if (accountName != null) {
            stmt.bindString(5, accountName);
        }
 
        String accountBank = entity.getAccountBank();
        if (accountBank != null) {
            stmt.bindString(6, accountBank);
        }
 
        String accountNo = entity.getAccountNo();
        if (accountNo != null) {
            stmt.bindString(7, accountNo);
        }
 
        String terminalName = entity.getTerminalName();
        if (terminalName != null) {
            stmt.bindString(8, terminalName);
        }
 
        String other = entity.getOther();
        if (other != null) {
            stmt.bindString(9, other);
        }
 
        String fyMerchantNo = entity.getFyMerchantNo();
        if (fyMerchantNo != null) {
            stmt.bindString(10, fyMerchantNo);
        }
 
        String fyMerchantName = entity.getFyMerchantName();
        if (fyMerchantName != null) {
            stmt.bindString(11, fyMerchantName);
        }
 
        String activeCode = entity.getActiveCode();
        if (activeCode != null) {
            stmt.bindString(12, activeCode);
        }
        stmt.bindLong(13, entity.getScanPayType());
 
        String operatList = entity.getOperatList();
        if (operatList != null) {
            stmt.bindString(14, operatList);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public LoginRespBean readEntity(Cursor cursor, int offset) {
        LoginRespBean entity = new LoginRespBean( //
            cursor.getInt(offset + 0), // sid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // merchantNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // terminalNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // licenseNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // accountName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // accountBank
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // accountNo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // terminalName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // other
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fyMerchantNo
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fyMerchantName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // activeCode
            cursor.getInt(offset + 12), // scanPayType
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // operatList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginRespBean entity, int offset) {
        entity.setSid(cursor.getInt(offset + 0));
        entity.setMerchantNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTerminalNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLicenseNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAccountName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAccountBank(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAccountNo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTerminalName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOther(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFyMerchantNo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFyMerchantName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setActiveCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setScanPayType(cursor.getInt(offset + 12));
        entity.setOperatList(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(LoginRespBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(LoginRespBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(LoginRespBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
